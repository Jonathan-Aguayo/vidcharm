generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  }

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  comments Comment[]
  videos Video[]
  playlists Playlist[]
  channel Channel?
}

model Comment {
  comId String @id @default(cuid())
  body String
  datePosted DateTime @default(now())
  like Int
  dislike Int
  author User @relation(fields: [uId], references: [id ])
  uId String
  source Video @relation(fields: [vId], references: [vId])
  vId String
}

model Video{
  vId String @id @default(cuid())
  title String
  vidUrl String @unique
  datePosted DateTime @default(now())
  views Int
  like Int
  dislike Int
  comments Comment[]
  author User @relation(fields: [uId], references: [id ])
  uId String
  source Channel @relation(fields: [chanId], references: [chanId])
  chanId String
  playlists include[]
}

model Playlist{
  pId String @id @default(cuid())
  name String
  listUrl String @unique
  createDate DateTime @default(now())
  author User @relation(fields: [uId], references: [id ])
  uId String
  source Channel @relation(fields: [chanId], references: [chanId])
  chanId String
  videos include[]
}

model include{
  play Playlist @relation(fields:[pId], references:[pId])
  pId String @id
  vid Video @relation(fields: [vId], references: [vId])
  vId String 
} 

model Channel{
  chanId String @id @default(cuid())
  name String @unique
  createDate DateTime @default(now())
  profilePicUrl String
  videos Video[]
  playlists Playlist[]
  auth User @relation(fields: [uId], references: [id ])
  uId String
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}